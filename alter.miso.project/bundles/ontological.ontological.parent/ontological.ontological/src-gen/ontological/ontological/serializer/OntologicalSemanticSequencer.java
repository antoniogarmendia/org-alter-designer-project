/*
 * generated by Xtext 2.23.0
 */
package ontological.ontological.serializer;

import com.google.inject.Inject;
import java.util.Set;
import ontological.OntologicalPackage;
import ontological.OntologicalRoot;
import ontological.OntologicalRootBluetooth;
import ontological.OntologicalRootClasses;
import ontological.OntologicalRootClassesItems;
import ontological.OntologicalRootClassesItemsAbstract;
import ontological.OntologicalRootClassesItemsAttributes;
import ontological.OntologicalRootClassesItemsAttributesItems;
import ontological.OntologicalRootClassesItemsAttributesItemsDefault;
import ontological.OntologicalRootClassesItemsAttributesItemsIsKey;
import ontological.OntologicalRootClassesItemsAttributesItemsIsParam;
import ontological.OntologicalRootClassesItemsAttributesItemsMax;
import ontological.OntologicalRootClassesItemsAttributesItemsMin;
import ontological.OntologicalRootClassesItemsAttributesItemsName;
import ontological.OntologicalRootClassesItemsAttributesItemsReadOnly;
import ontological.OntologicalRootClassesItemsAttributesItemsType;
import ontological.OntologicalRootClassesItemsAutoID;
import ontological.OntologicalRootClassesItemsBluetooth;
import ontological.OntologicalRootClassesItemsName;
import ontological.OntologicalRootClassesItemsNoSCN;
import ontological.OntologicalRootClassesItemsOnlyCodes;
import ontological.OntologicalRootClassesItemsReferences;
import ontological.OntologicalRootClassesItemsReferencesItems;
import ontological.OntologicalRootClassesItemsReferencesItemsContaintment;
import ontological.OntologicalRootClassesItemsReferencesItemsMax;
import ontological.OntologicalRootClassesItemsReferencesItemsMin;
import ontological.OntologicalRootClassesItemsReferencesItemsName;
import ontological.OntologicalRootClassesItemsReferencesItemsOpposite;
import ontological.OntologicalRootClassesItemsReferencesItemsTarget;
import ontological.OntologicalRootExternal;
import ontological.OntologicalRootFirebase;
import ontological.OntologicalRootGameloop;
import ontological.OntologicalRootName;
import ontological.OntologicalRootOnlyCodes;
import ontological.OntologicalRootPhysics;
import ontological.OntologicalRootURI;
import ontological.ontological.services.OntologicalGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class OntologicalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OntologicalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OntologicalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OntologicalPackage.ONTOLOGICAL_ROOT:
				sequence_OntologicalRoot(context, (OntologicalRoot) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_BLUETOOTH:
				sequence_OntologicalRootBluetooth(context, (OntologicalRootBluetooth) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES:
				sequence_OntologicalRootClasses(context, (OntologicalRootClasses) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS:
				sequence_OntologicalRootClassesItems(context, (OntologicalRootClassesItems) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ABSTRACT:
				sequence_OntologicalRootClassesItemsAbstract(context, (OntologicalRootClassesItemsAbstract) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES:
				sequence_OntologicalRootClassesItemsAttributes(context, (OntologicalRootClassesItemsAttributes) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS:
				sequence_OntologicalRootClassesItemsAttributesItems(context, (OntologicalRootClassesItemsAttributesItems) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_DEFAULT:
				sequence_OntologicalRootClassesItemsAttributesItemsDefault(context, (OntologicalRootClassesItemsAttributesItemsDefault) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_KEY:
				sequence_OntologicalRootClassesItemsAttributesItemsIsKey(context, (OntologicalRootClassesItemsAttributesItemsIsKey) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_PARAM:
				sequence_OntologicalRootClassesItemsAttributesItemsIsParam(context, (OntologicalRootClassesItemsAttributesItemsIsParam) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MAX:
				sequence_OntologicalRootClassesItemsAttributesItemsMax(context, (OntologicalRootClassesItemsAttributesItemsMax) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MIN:
				sequence_OntologicalRootClassesItemsAttributesItemsMin(context, (OntologicalRootClassesItemsAttributesItemsMin) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_NAME:
				sequence_OntologicalRootClassesItemsAttributesItemsName(context, (OntologicalRootClassesItemsAttributesItemsName) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_READ_ONLY:
				sequence_OntologicalRootClassesItemsAttributesItemsReadOnly(context, (OntologicalRootClassesItemsAttributesItemsReadOnly) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_TYPE:
				sequence_OntologicalRootClassesItemsAttributesItemsType(context, (OntologicalRootClassesItemsAttributesItemsType) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_AUTO_ID:
				sequence_OntologicalRootClassesItemsAutoID(context, (OntologicalRootClassesItemsAutoID) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_BLUETOOTH:
				sequence_OntologicalRootClassesItemsBluetooth(context, (OntologicalRootClassesItemsBluetooth) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NAME:
				sequence_OntologicalRootClassesItemsName(context, (OntologicalRootClassesItemsName) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NO_SCN:
				sequence_OntologicalRootClassesItemsNoSCN(context, (OntologicalRootClassesItemsNoSCN) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ONLY_CODES:
				sequence_OntologicalRootClassesItemsOnlyCodes(context, (OntologicalRootClassesItemsOnlyCodes) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES:
				sequence_OntologicalRootClassesItemsReferences(context, (OntologicalRootClassesItemsReferences) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS:
				sequence_OntologicalRootClassesItemsReferencesItems(context, (OntologicalRootClassesItemsReferencesItems) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_CONTAINTMENT:
				sequence_OntologicalRootClassesItemsReferencesItemsContaintment(context, (OntologicalRootClassesItemsReferencesItemsContaintment) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MAX:
				sequence_OntologicalRootClassesItemsReferencesItemsMax(context, (OntologicalRootClassesItemsReferencesItemsMax) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MIN:
				sequence_OntologicalRootClassesItemsReferencesItemsMin(context, (OntologicalRootClassesItemsReferencesItemsMin) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_NAME:
				sequence_OntologicalRootClassesItemsReferencesItemsName(context, (OntologicalRootClassesItemsReferencesItemsName) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_OPPOSITE:
				sequence_OntologicalRootClassesItemsReferencesItemsOpposite(context, (OntologicalRootClassesItemsReferencesItemsOpposite) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_TARGET:
				sequence_OntologicalRootClassesItemsReferencesItemsTarget(context, (OntologicalRootClassesItemsReferencesItemsTarget) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_EXTERNAL:
				sequence_OntologicalRootExternal(context, (OntologicalRootExternal) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_FIREBASE:
				sequence_OntologicalRootFirebase(context, (OntologicalRootFirebase) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_GAMELOOP:
				sequence_OntologicalRootGameloop(context, (OntologicalRootGameloop) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_NAME:
				sequence_OntologicalRootName(context, (OntologicalRootName) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_ONLY_CODES:
				sequence_OntologicalRootOnlyCodes(context, (OntologicalRootOnlyCodes) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_PHYSICS:
				sequence_OntologicalRootPhysics(context, (OntologicalRootPhysics) semanticObject); 
				return; 
			case OntologicalPackage.ONTOLOGICAL_ROOT_URI:
				sequence_OntologicalRootURI(context, (OntologicalRootURI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootBluetooth
	 *     OntologicalRootBluetooth returns OntologicalRootBluetooth
	 *
	 * Constraint:
	 *     bluetooth=EBooleanObject
	 */
	protected void sequence_OntologicalRootBluetooth(ISerializationContext context, OntologicalRootBluetooth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_BLUETOOTH__BLUETOOTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_BLUETOOTH__BLUETOOTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootBluetoothAccess().getBluetoothEBooleanObjectParserRuleCall_2_0(), semanticObject.getBluetooth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsAbstract
	 *     OntologicalRootClassesItemsAbstract returns OntologicalRootClassesItemsAbstract
	 *
	 * Constraint:
	 *     abstract=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAbstract(ISerializationContext context, OntologicalRootClassesItemsAbstract semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ABSTRACT__ABSTRACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ABSTRACT__ABSTRACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAbstractAccess().getAbstractEStringParserRuleCall_2_0(), semanticObject.getAbstract());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsDefault
	 *     OntologicalRootClassesItemsAttributesItemsDefault returns OntologicalRootClassesItemsAttributesItemsDefault
	 *
	 * Constraint:
	 *     default=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsDefault(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsDefault semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_DEFAULT__DEFAULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_DEFAULT__DEFAULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsDefaultAccess().getDefaultEStringParserRuleCall_2_0(), semanticObject.getDefault());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsIsKey
	 *     OntologicalRootClassesItemsAttributesItemsIsKey returns OntologicalRootClassesItemsAttributesItemsIsKey
	 *
	 * Constraint:
	 *     isKey=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsIsKey(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsIsKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_KEY__IS_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_KEY__IS_KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsIsKeyAccess().getIsKeyEBooleanObjectParserRuleCall_2_0(), semanticObject.getIsKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsIsParam
	 *     OntologicalRootClassesItemsAttributesItemsIsParam returns OntologicalRootClassesItemsAttributesItemsIsParam
	 *
	 * Constraint:
	 *     isParam=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsIsParam(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsIsParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_PARAM__IS_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_IS_PARAM__IS_PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsIsParamAccess().getIsParamEBooleanObjectParserRuleCall_2_0(), semanticObject.getIsParam());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsMax
	 *     OntologicalRootClassesItemsAttributesItemsMax returns OntologicalRootClassesItemsAttributesItemsMax
	 *
	 * Constraint:
	 *     max=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsMax(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsMax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MAX__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MAX__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsMaxAccess().getMaxEStringParserRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsMin
	 *     OntologicalRootClassesItemsAttributesItemsMin returns OntologicalRootClassesItemsAttributesItemsMin
	 *
	 * Constraint:
	 *     min=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsMin(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsMin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MIN__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_MIN__MIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsMinAccess().getMinEStringParserRuleCall_2_0(), semanticObject.getMin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsName
	 *     OntologicalRootClassesItemsAttributesItemsName returns OntologicalRootClassesItemsAttributesItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsName(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsReadOnly
	 *     OntologicalRootClassesItemsAttributesItemsReadOnly returns OntologicalRootClassesItemsAttributesItemsReadOnly
	 *
	 * Constraint:
	 *     readOnly=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsReadOnly(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsReadOnly semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_READ_ONLY__READ_ONLY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_READ_ONLY__READ_ONLY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsReadOnlyAccess().getReadOnlyEBooleanObjectParserRuleCall_2_0(), semanticObject.getReadOnly());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributesItemsType
	 *     OntologicalRootClassesItemsAttributesItemsType returns OntologicalRootClassesItemsAttributesItemsType
	 *
	 * Constraint:
	 *     type=EString
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItemsType(ISerializationContext context, OntologicalRootClassesItemsAttributesItemsType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ATTRIBUTES_ITEMS_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAttributesItemsTypeAccess().getTypeEStringParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsAttributesItems returns OntologicalRootClassesItemsAttributesItems
	 *
	 * Constraint:
	 *     (items+=OntologicalRootClassesItemsAttributesItemsPropertiesAbstract items+=OntologicalRootClassesItemsAttributesItemsPropertiesAbstract*)?
	 */
	protected void sequence_OntologicalRootClassesItemsAttributesItems(ISerializationContext context, OntologicalRootClassesItemsAttributesItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsAttributes
	 *     OntologicalRootClassesItemsAttributes returns OntologicalRootClassesItemsAttributes
	 *
	 * Constraint:
	 *     (attributes+=OntologicalRootClassesItemsAttributesItems attributes+=OntologicalRootClassesItemsAttributesItems*)?
	 */
	protected void sequence_OntologicalRootClassesItemsAttributes(ISerializationContext context, OntologicalRootClassesItemsAttributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsAutoID
	 *     OntologicalRootClassesItemsAutoID returns OntologicalRootClassesItemsAutoID
	 *
	 * Constraint:
	 *     autoID=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsAutoID(ISerializationContext context, OntologicalRootClassesItemsAutoID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_AUTO_ID__AUTO_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_AUTO_ID__AUTO_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsAutoIDAccess().getAutoIDEBooleanObjectParserRuleCall_2_0(), semanticObject.getAutoID());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsBluetooth
	 *     OntologicalRootClassesItemsBluetooth returns OntologicalRootClassesItemsBluetooth
	 *
	 * Constraint:
	 *     bluetooth=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsBluetooth(ISerializationContext context, OntologicalRootClassesItemsBluetooth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_BLUETOOTH__BLUETOOTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_BLUETOOTH__BLUETOOTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsBluetoothAccess().getBluetoothEBooleanObjectParserRuleCall_2_0(), semanticObject.getBluetooth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsName
	 *     OntologicalRootClassesItemsName returns OntologicalRootClassesItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_OntologicalRootClassesItemsName(ISerializationContext context, OntologicalRootClassesItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsNoSCN
	 *     OntologicalRootClassesItemsNoSCN returns OntologicalRootClassesItemsNoSCN
	 *
	 * Constraint:
	 *     noSCN=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsNoSCN(ISerializationContext context, OntologicalRootClassesItemsNoSCN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NO_SCN__NO_SCN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_NO_SCN__NO_SCN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsNoSCNAccess().getNoSCNEBooleanObjectParserRuleCall_2_0(), semanticObject.getNoSCN());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsOnlyCodes
	 *     OntologicalRootClassesItemsOnlyCodes returns OntologicalRootClassesItemsOnlyCodes
	 *
	 * Constraint:
	 *     onlyCodes=EBooleanObject
	 */
	protected void sequence_OntologicalRootClassesItemsOnlyCodes(ISerializationContext context, OntologicalRootClassesItemsOnlyCodes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ONLY_CODES__ONLY_CODES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_ONLY_CODES__ONLY_CODES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsOnlyCodesAccess().getOnlyCodesEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnlyCodes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsContaintment
	 *     OntologicalRootClassesItemsReferencesItemsContaintment returns OntologicalRootClassesItemsReferencesItemsContaintment
	 *
	 * Constraint:
	 *     containtment=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsContaintment(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsContaintment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_CONTAINTMENT__CONTAINTMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_CONTAINTMENT__CONTAINTMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsContaintmentAccess().getContaintmentEStringParserRuleCall_2_0(), semanticObject.getContaintment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsMax
	 *     OntologicalRootClassesItemsReferencesItemsMax returns OntologicalRootClassesItemsReferencesItemsMax
	 *
	 * Constraint:
	 *     max=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsMax(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsMax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MAX__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MAX__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsMaxAccess().getMaxEStringParserRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsMin
	 *     OntologicalRootClassesItemsReferencesItemsMin returns OntologicalRootClassesItemsReferencesItemsMin
	 *
	 * Constraint:
	 *     min=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsMin(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsMin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MIN__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_MIN__MIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsMinAccess().getMinEStringParserRuleCall_2_0(), semanticObject.getMin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsName
	 *     OntologicalRootClassesItemsReferencesItemsName returns OntologicalRootClassesItemsReferencesItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsName(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsOpposite
	 *     OntologicalRootClassesItemsReferencesItemsOpposite returns OntologicalRootClassesItemsReferencesItemsOpposite
	 *
	 * Constraint:
	 *     opposite=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsOpposite(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsOpposite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_OPPOSITE__OPPOSITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_OPPOSITE__OPPOSITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsOppositeAccess().getOppositeEStringParserRuleCall_2_0(), semanticObject.getOpposite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferencesItemsTarget
	 *     OntologicalRootClassesItemsReferencesItemsTarget returns OntologicalRootClassesItemsReferencesItemsTarget
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItemsTarget(ISerializationContext context, OntologicalRootClassesItemsReferencesItemsTarget semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_TARGET__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_CLASSES_ITEMS_REFERENCES_ITEMS_TARGET__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootClassesItemsReferencesItemsTargetAccess().getTargetEStringParserRuleCall_2_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsReferencesItems returns OntologicalRootClassesItemsReferencesItems
	 *
	 * Constraint:
	 *     (items+=OntologicalRootClassesItemsReferencesItemsPropertiesAbstract items+=OntologicalRootClassesItemsReferencesItemsPropertiesAbstract*)?
	 */
	protected void sequence_OntologicalRootClassesItemsReferencesItems(ISerializationContext context, OntologicalRootClassesItemsReferencesItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItemsPropertiesAbstract returns OntologicalRootClassesItemsReferences
	 *     OntologicalRootClassesItemsReferences returns OntologicalRootClassesItemsReferences
	 *
	 * Constraint:
	 *     (references+=OntologicalRootClassesItemsReferencesItems references+=OntologicalRootClassesItemsReferencesItems*)?
	 */
	protected void sequence_OntologicalRootClassesItemsReferences(ISerializationContext context, OntologicalRootClassesItemsReferences semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootClassesItems returns OntologicalRootClassesItems
	 *
	 * Constraint:
	 *     (items+=OntologicalRootClassesItemsPropertiesAbstract items+=OntologicalRootClassesItemsPropertiesAbstract*)?
	 */
	protected void sequence_OntologicalRootClassesItems(ISerializationContext context, OntologicalRootClassesItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootClasses
	 *     OntologicalRootClasses returns OntologicalRootClasses
	 *
	 * Constraint:
	 *     (classes+=OntologicalRootClassesItems classes+=OntologicalRootClassesItems*)?
	 */
	protected void sequence_OntologicalRootClasses(ISerializationContext context, OntologicalRootClasses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootExternal
	 *     OntologicalRootExternal returns OntologicalRootExternal
	 *
	 * Constraint:
	 *     external=EBooleanObject
	 */
	protected void sequence_OntologicalRootExternal(ISerializationContext context, OntologicalRootExternal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_EXTERNAL__EXTERNAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_EXTERNAL__EXTERNAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootExternalAccess().getExternalEBooleanObjectParserRuleCall_2_0(), semanticObject.getExternal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootFirebase
	 *     OntologicalRootFirebase returns OntologicalRootFirebase
	 *
	 * Constraint:
	 *     firebase=EBooleanObject
	 */
	protected void sequence_OntologicalRootFirebase(ISerializationContext context, OntologicalRootFirebase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_FIREBASE__FIREBASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_FIREBASE__FIREBASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootFirebaseAccess().getFirebaseEBooleanObjectParserRuleCall_2_0(), semanticObject.getFirebase());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootGameloop
	 *     OntologicalRootGameloop returns OntologicalRootGameloop
	 *
	 * Constraint:
	 *     gameloop=EBooleanObject
	 */
	protected void sequence_OntologicalRootGameloop(ISerializationContext context, OntologicalRootGameloop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_GAMELOOP__GAMELOOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_GAMELOOP__GAMELOOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootGameloopAccess().getGameloopEBooleanObjectParserRuleCall_2_0(), semanticObject.getGameloop());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootName
	 *     OntologicalRootName returns OntologicalRootName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_OntologicalRootName(ISerializationContext context, OntologicalRootName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootOnlyCodes
	 *     OntologicalRootOnlyCodes returns OntologicalRootOnlyCodes
	 *
	 * Constraint:
	 *     onlyCodes=EBooleanObject
	 */
	protected void sequence_OntologicalRootOnlyCodes(ISerializationContext context, OntologicalRootOnlyCodes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_ONLY_CODES__ONLY_CODES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_ONLY_CODES__ONLY_CODES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootOnlyCodesAccess().getOnlyCodesEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnlyCodes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootPhysics
	 *     OntologicalRootPhysics returns OntologicalRootPhysics
	 *
	 * Constraint:
	 *     physics=EBooleanObject
	 */
	protected void sequence_OntologicalRootPhysics(ISerializationContext context, OntologicalRootPhysics semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_PHYSICS__PHYSICS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_PHYSICS__PHYSICS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootPhysicsAccess().getPhysicsEBooleanObjectParserRuleCall_2_0(), semanticObject.getPhysics());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRootPropertiesAbstract returns OntologicalRootURI
	 *     OntologicalRootURI returns OntologicalRootURI
	 *
	 * Constraint:
	 *     URI=EString
	 */
	protected void sequence_OntologicalRootURI(ISerializationContext context, OntologicalRootURI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_URI__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OntologicalPackage.Literals.ONTOLOGICAL_ROOT_URI__URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOntologicalRootURIAccess().getURIEStringParserRuleCall_2_0(), semanticObject.getURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OntologicalRoot returns OntologicalRoot
	 *
	 * Constraint:
	 *     (ontologicalRoot+=OntologicalRootPropertiesAbstract ontologicalRoot+=OntologicalRootPropertiesAbstract*)?
	 */
	protected void sequence_OntologicalRoot(ISerializationContext context, OntologicalRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

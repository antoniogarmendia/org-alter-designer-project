/*
 * generated by Xtext 2.23.0
 */
package accesses.accesses.serializer;

import accesses.AccessesPackage;
import accesses.AccessesRoot;
import accesses.AccessesRootExternalAccess;
import accesses.AccessesRootExternalAccessItems;
import accesses.AccessesRootExternalAccessItemsAuth;
import accesses.AccessesRootExternalAccessItemsBody;
import accesses.AccessesRootExternalAccessItemsBodyItems;
import accesses.AccessesRootExternalAccessItemsBodyItemsAPIBody;
import accesses.AccessesRootExternalAccessItemsBodyItemsAttr;
import accesses.AccessesRootExternalAccessItemsClassname;
import accesses.AccessesRootExternalAccessItemsInput;
import accesses.AccessesRootExternalAccessItemsInputItems;
import accesses.AccessesRootExternalAccessItemsInputItemsAPIInput;
import accesses.AccessesRootExternalAccessItemsInputItemsAttr;
import accesses.AccessesRootExternalAccessItemsInputItemsValue;
import accesses.AccessesRootExternalAccessItemsInputItemsWay;
import accesses.AccessesRootExternalAccessItemsMethod;
import accesses.AccessesRootExternalAccessItemsName;
import accesses.AccessesRootExternalAccessItemsOntological;
import accesses.AccessesRootExternalAccessItemsOutput;
import accesses.AccessesRootExternalAccessItemsOutputItems;
import accesses.AccessesRootExternalAccessItemsOutputItemsAPIOutput;
import accesses.AccessesRootExternalAccessItemsOutputItemsAttr;
import accesses.AccessesRootExternalAccessItemsPath;
import accesses.AccessesRootExternalAccessItemsTrigger;
import accesses.AccessesRootExternalAccessItemsTriggerOnAccess;
import accesses.AccessesRootExternalAccessItemsTriggerOnChange;
import accesses.AccessesRootExternalAccessItemsTriggerOnCreate;
import accesses.AccessesRootExternalAccessItemsTriggerOnDelete;
import accesses.AccessesRootExternalAccessItemsTriggerOnLoad;
import accesses.AccessesRootExternalAccessItemsTriggerOnMove;
import accesses.AccessesRootExternalAccessItemsTriggerTimeTrigger;
import accesses.accesses.services.AccessesGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AccessesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AccessesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AccessesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AccessesPackage.ACCESSES_ROOT:
				sequence_AccessesRoot(context, (AccessesRoot) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS:
				sequence_AccessesRootExternalAccess(context, (AccessesRootExternalAccess) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS:
				sequence_AccessesRootExternalAccessItems(context, (AccessesRootExternalAccessItems) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_AUTH:
				sequence_AccessesRootExternalAccessItemsAuth(context, (AccessesRootExternalAccessItemsAuth) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY:
				sequence_AccessesRootExternalAccessItemsBody(context, (AccessesRootExternalAccessItemsBody) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS:
				sequence_AccessesRootExternalAccessItemsBodyItems(context, (AccessesRootExternalAccessItemsBodyItems) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_API_BODY:
				sequence_AccessesRootExternalAccessItemsBodyItemsAPIBody(context, (AccessesRootExternalAccessItemsBodyItemsAPIBody) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_ATTR:
				sequence_AccessesRootExternalAccessItemsBodyItemsAttr(context, (AccessesRootExternalAccessItemsBodyItemsAttr) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_CLASSNAME:
				sequence_AccessesRootExternalAccessItemsClassname(context, (AccessesRootExternalAccessItemsClassname) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT:
				sequence_AccessesRootExternalAccessItemsInput(context, (AccessesRootExternalAccessItemsInput) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS:
				sequence_AccessesRootExternalAccessItemsInputItems(context, (AccessesRootExternalAccessItemsInputItems) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_API_INPUT:
				sequence_AccessesRootExternalAccessItemsInputItemsAPIInput(context, (AccessesRootExternalAccessItemsInputItemsAPIInput) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_ATTR:
				sequence_AccessesRootExternalAccessItemsInputItemsAttr(context, (AccessesRootExternalAccessItemsInputItemsAttr) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_VALUE:
				sequence_AccessesRootExternalAccessItemsInputItemsValue(context, (AccessesRootExternalAccessItemsInputItemsValue) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_WAY:
				sequence_AccessesRootExternalAccessItemsInputItemsWay(context, (AccessesRootExternalAccessItemsInputItemsWay) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_METHOD:
				sequence_AccessesRootExternalAccessItemsMethod(context, (AccessesRootExternalAccessItemsMethod) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_NAME:
				sequence_AccessesRootExternalAccessItemsName(context, (AccessesRootExternalAccessItemsName) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_ONTOLOGICAL:
				sequence_AccessesRootExternalAccessItemsOntological(context, (AccessesRootExternalAccessItemsOntological) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT:
				sequence_AccessesRootExternalAccessItemsOutput(context, (AccessesRootExternalAccessItemsOutput) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS:
				sequence_AccessesRootExternalAccessItemsOutputItems(context, (AccessesRootExternalAccessItemsOutputItems) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_API_OUTPUT:
				sequence_AccessesRootExternalAccessItemsOutputItemsAPIOutput(context, (AccessesRootExternalAccessItemsOutputItemsAPIOutput) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_ATTR:
				sequence_AccessesRootExternalAccessItemsOutputItemsAttr(context, (AccessesRootExternalAccessItemsOutputItemsAttr) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_PATH:
				sequence_AccessesRootExternalAccessItemsPath(context, (AccessesRootExternalAccessItemsPath) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER:
				sequence_AccessesRootExternalAccessItemsTrigger(context, (AccessesRootExternalAccessItemsTrigger) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_ACCESS:
				sequence_AccessesRootExternalAccessItemsTriggerOnAccess(context, (AccessesRootExternalAccessItemsTriggerOnAccess) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CHANGE:
				sequence_AccessesRootExternalAccessItemsTriggerOnChange(context, (AccessesRootExternalAccessItemsTriggerOnChange) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CREATE:
				sequence_AccessesRootExternalAccessItemsTriggerOnCreate(context, (AccessesRootExternalAccessItemsTriggerOnCreate) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_DELETE:
				sequence_AccessesRootExternalAccessItemsTriggerOnDelete(context, (AccessesRootExternalAccessItemsTriggerOnDelete) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_LOAD:
				sequence_AccessesRootExternalAccessItemsTriggerOnLoad(context, (AccessesRootExternalAccessItemsTriggerOnLoad) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_MOVE:
				sequence_AccessesRootExternalAccessItemsTriggerOnMove(context, (AccessesRootExternalAccessItemsTriggerOnMove) semanticObject); 
				return; 
			case AccessesPackage.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_TIME_TRIGGER:
				sequence_AccessesRootExternalAccessItemsTriggerTimeTrigger(context, (AccessesRootExternalAccessItemsTriggerTimeTrigger) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsAuth
	 *     AccessesRootExternalAccessItemsAuth returns AccessesRootExternalAccessItemsAuth
	 *
	 * Constraint:
	 *     auth=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsAuth(ISerializationContext context, AccessesRootExternalAccessItemsAuth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_AUTH__AUTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_AUTH__AUTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsAuthAccess().getAuthEStringParserRuleCall_2_0(), semanticObject.getAuth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsBodyItemsPropertiesAbstract returns AccessesRootExternalAccessItemsBodyItemsAPIBody
	 *     AccessesRootExternalAccessItemsBodyItemsAPIBody returns AccessesRootExternalAccessItemsBodyItemsAPIBody
	 *
	 * Constraint:
	 *     APIBody=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsBodyItemsAPIBody(ISerializationContext context, AccessesRootExternalAccessItemsBodyItemsAPIBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_API_BODY__API_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_API_BODY__API_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsBodyItemsAPIBodyAccess().getAPIBodyEStringParserRuleCall_2_0(), semanticObject.getAPIBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsBodyItemsPropertiesAbstract returns AccessesRootExternalAccessItemsBodyItemsAttr
	 *     AccessesRootExternalAccessItemsBodyItemsAttr returns AccessesRootExternalAccessItemsBodyItemsAttr
	 *
	 * Constraint:
	 *     attr=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsBodyItemsAttr(ISerializationContext context, AccessesRootExternalAccessItemsBodyItemsAttr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_ATTR__ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_BODY_ITEMS_ATTR__ATTR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsBodyItemsAttrAccess().getAttrEStringParserRuleCall_2_0(), semanticObject.getAttr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsBodyItems returns AccessesRootExternalAccessItemsBodyItems
	 *
	 * Constraint:
	 *     (items+=AccessesRootExternalAccessItemsBodyItemsPropertiesAbstract items+=AccessesRootExternalAccessItemsBodyItemsPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsBodyItems(ISerializationContext context, AccessesRootExternalAccessItemsBodyItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsBody
	 *     AccessesRootExternalAccessItemsBody returns AccessesRootExternalAccessItemsBody
	 *
	 * Constraint:
	 *     (body+=AccessesRootExternalAccessItemsBodyItems body+=AccessesRootExternalAccessItemsBodyItems*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsBody(ISerializationContext context, AccessesRootExternalAccessItemsBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsClassname
	 *     AccessesRootExternalAccessItemsClassname returns AccessesRootExternalAccessItemsClassname
	 *
	 * Constraint:
	 *     classname=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsClassname(ISerializationContext context, AccessesRootExternalAccessItemsClassname semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_CLASSNAME__CLASSNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_CLASSNAME__CLASSNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsClassnameAccess().getClassnameEStringParserRuleCall_2_0(), semanticObject.getClassname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsInputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsInputItemsAPIInput
	 *     AccessesRootExternalAccessItemsInputItemsAPIInput returns AccessesRootExternalAccessItemsInputItemsAPIInput
	 *
	 * Constraint:
	 *     APIInput=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsInputItemsAPIInput(ISerializationContext context, AccessesRootExternalAccessItemsInputItemsAPIInput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_API_INPUT__API_INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_API_INPUT__API_INPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsInputItemsAPIInputAccess().getAPIInputEStringParserRuleCall_2_0(), semanticObject.getAPIInput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsInputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsInputItemsAttr
	 *     AccessesRootExternalAccessItemsInputItemsAttr returns AccessesRootExternalAccessItemsInputItemsAttr
	 *
	 * Constraint:
	 *     attr=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsInputItemsAttr(ISerializationContext context, AccessesRootExternalAccessItemsInputItemsAttr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_ATTR__ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_ATTR__ATTR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsInputItemsAttrAccess().getAttrEStringParserRuleCall_2_0(), semanticObject.getAttr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsInputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsInputItemsValue
	 *     AccessesRootExternalAccessItemsInputItemsValue returns AccessesRootExternalAccessItemsInputItemsValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsInputItemsValue(ISerializationContext context, AccessesRootExternalAccessItemsInputItemsValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsInputItemsValueAccess().getValueEStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsInputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsInputItemsWay
	 *     AccessesRootExternalAccessItemsInputItemsWay returns AccessesRootExternalAccessItemsInputItemsWay
	 *
	 * Constraint:
	 *     way=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsInputItemsWay(ISerializationContext context, AccessesRootExternalAccessItemsInputItemsWay semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_WAY__WAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_INPUT_ITEMS_WAY__WAY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsInputItemsWayAccess().getWayEStringParserRuleCall_2_0(), semanticObject.getWay());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsInputItems returns AccessesRootExternalAccessItemsInputItems
	 *
	 * Constraint:
	 *     (items+=AccessesRootExternalAccessItemsInputItemsPropertiesAbstract items+=AccessesRootExternalAccessItemsInputItemsPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsInputItems(ISerializationContext context, AccessesRootExternalAccessItemsInputItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsInput
	 *     AccessesRootExternalAccessItemsInput returns AccessesRootExternalAccessItemsInput
	 *
	 * Constraint:
	 *     (input+=AccessesRootExternalAccessItemsInputItems input+=AccessesRootExternalAccessItemsInputItems*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsInput(ISerializationContext context, AccessesRootExternalAccessItemsInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsMethod
	 *     AccessesRootExternalAccessItemsMethod returns AccessesRootExternalAccessItemsMethod
	 *
	 * Constraint:
	 *     method=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsMethod(ISerializationContext context, AccessesRootExternalAccessItemsMethod semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_METHOD__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_METHOD__METHOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsMethodAccess().getMethodEStringParserRuleCall_2_0(), semanticObject.getMethod());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsName
	 *     AccessesRootExternalAccessItemsName returns AccessesRootExternalAccessItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsName(ISerializationContext context, AccessesRootExternalAccessItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsOntological
	 *     AccessesRootExternalAccessItemsOntological returns AccessesRootExternalAccessItemsOntological
	 *
	 * Constraint:
	 *     ontological=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsOntological(ISerializationContext context, AccessesRootExternalAccessItemsOntological semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_ONTOLOGICAL__ONTOLOGICAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_ONTOLOGICAL__ONTOLOGICAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsOntologicalAccess().getOntologicalEStringParserRuleCall_2_0(), semanticObject.getOntological());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsOutputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsOutputItemsAPIOutput
	 *     AccessesRootExternalAccessItemsOutputItemsAPIOutput returns AccessesRootExternalAccessItemsOutputItemsAPIOutput
	 *
	 * Constraint:
	 *     APIOutput=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsOutputItemsAPIOutput(ISerializationContext context, AccessesRootExternalAccessItemsOutputItemsAPIOutput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_API_OUTPUT__API_OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_API_OUTPUT__API_OUTPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsOutputItemsAPIOutputAccess().getAPIOutputEStringParserRuleCall_2_0(), semanticObject.getAPIOutput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsOutputItemsPropertiesAbstract returns AccessesRootExternalAccessItemsOutputItemsAttr
	 *     AccessesRootExternalAccessItemsOutputItemsAttr returns AccessesRootExternalAccessItemsOutputItemsAttr
	 *
	 * Constraint:
	 *     attr=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsOutputItemsAttr(ISerializationContext context, AccessesRootExternalAccessItemsOutputItemsAttr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_ATTR__ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_OUTPUT_ITEMS_ATTR__ATTR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsOutputItemsAttrAccess().getAttrEStringParserRuleCall_2_0(), semanticObject.getAttr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsOutputItems returns AccessesRootExternalAccessItemsOutputItems
	 *
	 * Constraint:
	 *     (items+=AccessesRootExternalAccessItemsOutputItemsPropertiesAbstract items+=AccessesRootExternalAccessItemsOutputItemsPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsOutputItems(ISerializationContext context, AccessesRootExternalAccessItemsOutputItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsOutput
	 *     AccessesRootExternalAccessItemsOutput returns AccessesRootExternalAccessItemsOutput
	 *
	 * Constraint:
	 *     (output+=AccessesRootExternalAccessItemsOutputItems output+=AccessesRootExternalAccessItemsOutputItems*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsOutput(ISerializationContext context, AccessesRootExternalAccessItemsOutput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsPath
	 *     AccessesRootExternalAccessItemsPath returns AccessesRootExternalAccessItemsPath
	 *
	 * Constraint:
	 *     path=EString
	 */
	protected void sequence_AccessesRootExternalAccessItemsPath(ISerializationContext context, AccessesRootExternalAccessItemsPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_PATH__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_PATH__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsPathAccess().getPathEStringParserRuleCall_2_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnAccess
	 *     AccessesRootExternalAccessItemsTriggerOnAccess returns AccessesRootExternalAccessItemsTriggerOnAccess
	 *
	 * Constraint:
	 *     onAccess=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnAccess(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_ACCESS__ON_ACCESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_ACCESS__ON_ACCESS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnAccessAccess().getOnAccessEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnAccess());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnChange
	 *     AccessesRootExternalAccessItemsTriggerOnChange returns AccessesRootExternalAccessItemsTriggerOnChange
	 *
	 * Constraint:
	 *     onChange=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnChange(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnChange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CHANGE__ON_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CHANGE__ON_CHANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnChangeAccess().getOnChangeEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnChange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnCreate
	 *     AccessesRootExternalAccessItemsTriggerOnCreate returns AccessesRootExternalAccessItemsTriggerOnCreate
	 *
	 * Constraint:
	 *     onCreate=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnCreate(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnCreate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CREATE__ON_CREATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_CREATE__ON_CREATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnCreateAccess().getOnCreateEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnCreate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnDelete
	 *     AccessesRootExternalAccessItemsTriggerOnDelete returns AccessesRootExternalAccessItemsTriggerOnDelete
	 *
	 * Constraint:
	 *     onDelete=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnDelete(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnDelete semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_DELETE__ON_DELETE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_DELETE__ON_DELETE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnDeleteAccess().getOnDeleteEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnDelete());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnLoad
	 *     AccessesRootExternalAccessItemsTriggerOnLoad returns AccessesRootExternalAccessItemsTriggerOnLoad
	 *
	 * Constraint:
	 *     onLoad=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnLoad(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnLoad semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_LOAD__ON_LOAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_LOAD__ON_LOAD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnLoadAccess().getOnLoadEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnLoad());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerOnMove
	 *     AccessesRootExternalAccessItemsTriggerOnMove returns AccessesRootExternalAccessItemsTriggerOnMove
	 *
	 * Constraint:
	 *     onMove=EBooleanObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerOnMove(ISerializationContext context, AccessesRootExternalAccessItemsTriggerOnMove semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_MOVE__ON_MOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_ON_MOVE__ON_MOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerOnMoveAccess().getOnMoveEBooleanObjectParserRuleCall_2_0(), semanticObject.getOnMove());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsTriggerPropertiesAbstract returns AccessesRootExternalAccessItemsTriggerTimeTrigger
	 *     AccessesRootExternalAccessItemsTriggerTimeTrigger returns AccessesRootExternalAccessItemsTriggerTimeTrigger
	 *
	 * Constraint:
	 *     timeTrigger=EDoubleObject
	 */
	protected void sequence_AccessesRootExternalAccessItemsTriggerTimeTrigger(ISerializationContext context, AccessesRootExternalAccessItemsTriggerTimeTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_TIME_TRIGGER__TIME_TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessesPackage.Literals.ACCESSES_ROOT_EXTERNAL_ACCESS_ITEMS_TRIGGER_TIME_TRIGGER__TIME_TRIGGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessesRootExternalAccessItemsTriggerTimeTriggerAccess().getTimeTriggerEDoubleObjectParserRuleCall_2_0(), semanticObject.getTimeTrigger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItemsPropertiesAbstract returns AccessesRootExternalAccessItemsTrigger
	 *     AccessesRootExternalAccessItemsTrigger returns AccessesRootExternalAccessItemsTrigger
	 *
	 * Constraint:
	 *     (trigger+=AccessesRootExternalAccessItemsTriggerPropertiesAbstract trigger+=AccessesRootExternalAccessItemsTriggerPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRootExternalAccessItemsTrigger(ISerializationContext context, AccessesRootExternalAccessItemsTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootExternalAccessItems returns AccessesRootExternalAccessItems
	 *
	 * Constraint:
	 *     (items+=AccessesRootExternalAccessItemsPropertiesAbstract items+=AccessesRootExternalAccessItemsPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRootExternalAccessItems(ISerializationContext context, AccessesRootExternalAccessItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRootPropertiesAbstract returns AccessesRootExternalAccess
	 *     AccessesRootExternalAccess returns AccessesRootExternalAccess
	 *
	 * Constraint:
	 *     (ExternalAccess+=AccessesRootExternalAccessItems ExternalAccess+=AccessesRootExternalAccessItems*)?
	 */
	protected void sequence_AccessesRootExternalAccess(ISerializationContext context, AccessesRootExternalAccess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AccessesRoot returns AccessesRoot
	 *
	 * Constraint:
	 *     (accessesRoot+=AccessesRootPropertiesAbstract accessesRoot+=AccessesRootPropertiesAbstract*)?
	 */
	protected void sequence_AccessesRoot(ISerializationContext context, AccessesRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

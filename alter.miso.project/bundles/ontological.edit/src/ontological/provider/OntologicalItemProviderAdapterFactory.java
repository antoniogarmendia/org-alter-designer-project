/**
 */
package ontological.provider;

import java.util.ArrayList;
import java.util.Collection;

import ontological.util.OntologicalAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OntologicalItemProviderAdapterFactory extends OntologicalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OntologicalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootItemProvider ontologicalRootItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootAdapter() {
		if (ontologicalRootItemProvider == null) {
			ontologicalRootItemProvider = new OntologicalRootItemProvider(this);
		}

		return ontologicalRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootNameItemProvider ontologicalRootNameItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootNameAdapter() {
		if (ontologicalRootNameItemProvider == null) {
			ontologicalRootNameItemProvider = new OntologicalRootNameItemProvider(this);
		}

		return ontologicalRootNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootURI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootURIItemProvider ontologicalRootURIItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootURI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootURIAdapter() {
		if (ontologicalRootURIItemProvider == null) {
			ontologicalRootURIItemProvider = new OntologicalRootURIItemProvider(this);
		}

		return ontologicalRootURIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootOnlyCodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootOnlyCodesItemProvider ontologicalRootOnlyCodesItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootOnlyCodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootOnlyCodesAdapter() {
		if (ontologicalRootOnlyCodesItemProvider == null) {
			ontologicalRootOnlyCodesItemProvider = new OntologicalRootOnlyCodesItemProvider(this);
		}

		return ontologicalRootOnlyCodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootBluetooth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootBluetoothItemProvider ontologicalRootBluetoothItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootBluetooth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootBluetoothAdapter() {
		if (ontologicalRootBluetoothItemProvider == null) {
			ontologicalRootBluetoothItemProvider = new OntologicalRootBluetoothItemProvider(this);
		}

		return ontologicalRootBluetoothItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootExternal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootExternalItemProvider ontologicalRootExternalItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootExternal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootExternalAdapter() {
		if (ontologicalRootExternalItemProvider == null) {
			ontologicalRootExternalItemProvider = new OntologicalRootExternalItemProvider(this);
		}

		return ontologicalRootExternalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootFirebase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootFirebaseItemProvider ontologicalRootFirebaseItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootFirebase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootFirebaseAdapter() {
		if (ontologicalRootFirebaseItemProvider == null) {
			ontologicalRootFirebaseItemProvider = new OntologicalRootFirebaseItemProvider(this);
		}

		return ontologicalRootFirebaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootPhysics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootPhysicsItemProvider ontologicalRootPhysicsItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootPhysics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootPhysicsAdapter() {
		if (ontologicalRootPhysicsItemProvider == null) {
			ontologicalRootPhysicsItemProvider = new OntologicalRootPhysicsItemProvider(this);
		}

		return ontologicalRootPhysicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootGameloop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootGameloopItemProvider ontologicalRootGameloopItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootGameloop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootGameloopAdapter() {
		if (ontologicalRootGameloopItemProvider == null) {
			ontologicalRootGameloopItemProvider = new OntologicalRootGameloopItemProvider(this);
		}

		return ontologicalRootGameloopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClasses} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemProvider ontologicalRootClassesItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClasses}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesAdapter() {
		if (ontologicalRootClassesItemProvider == null) {
			ontologicalRootClassesItemProvider = new OntologicalRootClassesItemProvider(this);
		}

		return ontologicalRootClassesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsItemProvider ontologicalRootClassesItemsItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAdapter() {
		if (ontologicalRootClassesItemsItemProvider == null) {
			ontologicalRootClassesItemsItemProvider = new OntologicalRootClassesItemsItemProvider(this);
		}

		return ontologicalRootClassesItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsNameItemProvider ontologicalRootClassesItemsNameItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsNameAdapter() {
		if (ontologicalRootClassesItemsNameItemProvider == null) {
			ontologicalRootClassesItemsNameItemProvider = new OntologicalRootClassesItemsNameItemProvider(this);
		}

		return ontologicalRootClassesItemsNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAbstract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAbstractItemProvider ontologicalRootClassesItemsAbstractItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAbstract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAbstractAdapter() {
		if (ontologicalRootClassesItemsAbstractItemProvider == null) {
			ontologicalRootClassesItemsAbstractItemProvider = new OntologicalRootClassesItemsAbstractItemProvider(this);
		}

		return ontologicalRootClassesItemsAbstractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemProvider ontologicalRootClassesItemsAttributesItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesAdapter() {
		if (ontologicalRootClassesItemsAttributesItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemProvider = new OntologicalRootClassesItemsAttributesItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsItemProvider ontologicalRootClassesItemsAttributesItemsItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsItemProvider = new OntologicalRootClassesItemsAttributesItemsItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsNameItemProvider ontologicalRootClassesItemsAttributesItemsNameItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsNameAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsNameItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsNameItemProvider = new OntologicalRootClassesItemsAttributesItemsNameItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsTypeItemProvider ontologicalRootClassesItemsAttributesItemsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsTypeAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsTypeItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsTypeItemProvider = new OntologicalRootClassesItemsAttributesItemsTypeItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsMin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsMinItemProvider ontologicalRootClassesItemsAttributesItemsMinItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsMin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsMinAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsMinItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsMinItemProvider = new OntologicalRootClassesItemsAttributesItemsMinItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsMinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsMax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsMaxItemProvider ontologicalRootClassesItemsAttributesItemsMaxItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsMax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsMaxAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsMaxItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsMaxItemProvider = new OntologicalRootClassesItemsAttributesItemsMaxItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsMaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsDefault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsDefaultItemProvider ontologicalRootClassesItemsAttributesItemsDefaultItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsDefault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsDefaultAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsDefaultItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsDefaultItemProvider = new OntologicalRootClassesItemsAttributesItemsDefaultItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsDefaultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsReadOnly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsReadOnlyItemProvider ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsReadOnly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsReadOnlyAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider = new OntologicalRootClassesItemsAttributesItemsReadOnlyItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsIsParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsIsParamItemProvider ontologicalRootClassesItemsAttributesItemsIsParamItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsIsParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsIsParamAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsIsParamItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsIsParamItemProvider = new OntologicalRootClassesItemsAttributesItemsIsParamItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsIsParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAttributesItemsIsKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAttributesItemsIsKeyItemProvider ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAttributesItemsIsKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAttributesItemsIsKeyAdapter() {
		if (ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider == null) {
			ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider = new OntologicalRootClassesItemsAttributesItemsIsKeyItemProvider(this);
		}

		return ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferences} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemProvider ontologicalRootClassesItemsReferencesItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferences}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesAdapter() {
		if (ontologicalRootClassesItemsReferencesItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemProvider = new OntologicalRootClassesItemsReferencesItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsItemProvider ontologicalRootClassesItemsReferencesItemsItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsItemProvider = new OntologicalRootClassesItemsReferencesItemsItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsNameItemProvider ontologicalRootClassesItemsReferencesItemsNameItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsNameAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsNameItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsNameItemProvider = new OntologicalRootClassesItemsReferencesItemsNameItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsContaintment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsContaintmentItemProvider ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsContaintment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsContaintmentAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider = new OntologicalRootClassesItemsReferencesItemsContaintmentItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsMin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsMinItemProvider ontologicalRootClassesItemsReferencesItemsMinItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsMin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsMinAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsMinItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsMinItemProvider = new OntologicalRootClassesItemsReferencesItemsMinItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsMinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsMax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsMaxItemProvider ontologicalRootClassesItemsReferencesItemsMaxItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsMax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsMaxAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsMaxItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsMaxItemProvider = new OntologicalRootClassesItemsReferencesItemsMaxItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsMaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsTargetItemProvider ontologicalRootClassesItemsReferencesItemsTargetItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsTargetAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsTargetItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsTargetItemProvider = new OntologicalRootClassesItemsReferencesItemsTargetItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsReferencesItemsOpposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsReferencesItemsOppositeItemProvider ontologicalRootClassesItemsReferencesItemsOppositeItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsReferencesItemsOpposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsReferencesItemsOppositeAdapter() {
		if (ontologicalRootClassesItemsReferencesItemsOppositeItemProvider == null) {
			ontologicalRootClassesItemsReferencesItemsOppositeItemProvider = new OntologicalRootClassesItemsReferencesItemsOppositeItemProvider(this);
		}

		return ontologicalRootClassesItemsReferencesItemsOppositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsAutoID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsAutoIDItemProvider ontologicalRootClassesItemsAutoIDItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsAutoID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsAutoIDAdapter() {
		if (ontologicalRootClassesItemsAutoIDItemProvider == null) {
			ontologicalRootClassesItemsAutoIDItemProvider = new OntologicalRootClassesItemsAutoIDItemProvider(this);
		}

		return ontologicalRootClassesItemsAutoIDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsOnlyCodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsOnlyCodesItemProvider ontologicalRootClassesItemsOnlyCodesItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsOnlyCodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsOnlyCodesAdapter() {
		if (ontologicalRootClassesItemsOnlyCodesItemProvider == null) {
			ontologicalRootClassesItemsOnlyCodesItemProvider = new OntologicalRootClassesItemsOnlyCodesItemProvider(this);
		}

		return ontologicalRootClassesItemsOnlyCodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsBluetooth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsBluetoothItemProvider ontologicalRootClassesItemsBluetoothItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsBluetooth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsBluetoothAdapter() {
		if (ontologicalRootClassesItemsBluetoothItemProvider == null) {
			ontologicalRootClassesItemsBluetoothItemProvider = new OntologicalRootClassesItemsBluetoothItemProvider(this);
		}

		return ontologicalRootClassesItemsBluetoothItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ontological.OntologicalRootClassesItemsNoSCN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologicalRootClassesItemsNoSCNItemProvider ontologicalRootClassesItemsNoSCNItemProvider;

	/**
	 * This creates an adapter for a {@link ontological.OntologicalRootClassesItemsNoSCN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologicalRootClassesItemsNoSCNAdapter() {
		if (ontologicalRootClassesItemsNoSCNItemProvider == null) {
			ontologicalRootClassesItemsNoSCNItemProvider = new OntologicalRootClassesItemsNoSCNItemProvider(this);
		}

		return ontologicalRootClassesItemsNoSCNItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (ontologicalRootItemProvider != null) ontologicalRootItemProvider.dispose();
		if (ontologicalRootNameItemProvider != null) ontologicalRootNameItemProvider.dispose();
		if (ontologicalRootURIItemProvider != null) ontologicalRootURIItemProvider.dispose();
		if (ontologicalRootOnlyCodesItemProvider != null) ontologicalRootOnlyCodesItemProvider.dispose();
		if (ontologicalRootBluetoothItemProvider != null) ontologicalRootBluetoothItemProvider.dispose();
		if (ontologicalRootExternalItemProvider != null) ontologicalRootExternalItemProvider.dispose();
		if (ontologicalRootFirebaseItemProvider != null) ontologicalRootFirebaseItemProvider.dispose();
		if (ontologicalRootPhysicsItemProvider != null) ontologicalRootPhysicsItemProvider.dispose();
		if (ontologicalRootGameloopItemProvider != null) ontologicalRootGameloopItemProvider.dispose();
		if (ontologicalRootClassesItemProvider != null) ontologicalRootClassesItemProvider.dispose();
		if (ontologicalRootClassesItemsItemProvider != null) ontologicalRootClassesItemsItemProvider.dispose();
		if (ontologicalRootClassesItemsNameItemProvider != null) ontologicalRootClassesItemsNameItemProvider.dispose();
		if (ontologicalRootClassesItemsAbstractItemProvider != null) ontologicalRootClassesItemsAbstractItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemProvider != null) ontologicalRootClassesItemsAttributesItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsItemProvider != null) ontologicalRootClassesItemsAttributesItemsItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsNameItemProvider != null) ontologicalRootClassesItemsAttributesItemsNameItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsTypeItemProvider != null) ontologicalRootClassesItemsAttributesItemsTypeItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsMinItemProvider != null) ontologicalRootClassesItemsAttributesItemsMinItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsMaxItemProvider != null) ontologicalRootClassesItemsAttributesItemsMaxItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsDefaultItemProvider != null) ontologicalRootClassesItemsAttributesItemsDefaultItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider != null) ontologicalRootClassesItemsAttributesItemsReadOnlyItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsIsParamItemProvider != null) ontologicalRootClassesItemsAttributesItemsIsParamItemProvider.dispose();
		if (ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider != null) ontologicalRootClassesItemsAttributesItemsIsKeyItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemProvider != null) ontologicalRootClassesItemsReferencesItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsItemProvider != null) ontologicalRootClassesItemsReferencesItemsItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsNameItemProvider != null) ontologicalRootClassesItemsReferencesItemsNameItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider != null) ontologicalRootClassesItemsReferencesItemsContaintmentItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsMinItemProvider != null) ontologicalRootClassesItemsReferencesItemsMinItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsMaxItemProvider != null) ontologicalRootClassesItemsReferencesItemsMaxItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsTargetItemProvider != null) ontologicalRootClassesItemsReferencesItemsTargetItemProvider.dispose();
		if (ontologicalRootClassesItemsReferencesItemsOppositeItemProvider != null) ontologicalRootClassesItemsReferencesItemsOppositeItemProvider.dispose();
		if (ontologicalRootClassesItemsAutoIDItemProvider != null) ontologicalRootClassesItemsAutoIDItemProvider.dispose();
		if (ontologicalRootClassesItemsOnlyCodesItemProvider != null) ontologicalRootClassesItemsOnlyCodesItemProvider.dispose();
		if (ontologicalRootClassesItemsBluetoothItemProvider != null) ontologicalRootClassesItemsBluetoothItemProvider.dispose();
		if (ontologicalRootClassesItemsNoSCNItemProvider != null) ontologicalRootClassesItemsNoSCNItemProvider.dispose();
	}

}

/*
 * generated by Xtext 2.23.0
 */
package graphic.graphic.serializer;

import com.google.inject.Inject;
import graphic.GraphicPackage;
import graphic.GraphicRoot;
import graphic.GraphicRootClasses;
import graphic.GraphicRootClassesItems;
import graphic.GraphicRootClassesItemsConnections;
import graphic.GraphicRootClassesItemsConnectionsItems;
import graphic.GraphicRootClassesItemsConnectionsItemsColor;
import graphic.GraphicRootClassesItemsConnectionsItemsDecorator;
import graphic.GraphicRootClassesItemsConnectionsItemsDecoratorColor;
import graphic.GraphicRootClassesItemsConnectionsItemsDecoratorPos;
import graphic.GraphicRootClassesItemsConnectionsItemsDecoratorWidth;
import graphic.GraphicRootClassesItemsConnectionsItemsName;
import graphic.GraphicRootClassesItemsConnectionsItemsPattern;
import graphic.GraphicRootClassesItemsConnectionsItemsPosition;
import graphic.GraphicRootClassesItemsConnectionsItemsTarget;
import graphic.GraphicRootClassesItemsConnectionsItemsTextColor;
import graphic.GraphicRootClassesItemsConnectionsItemsType;
import graphic.GraphicRootClassesItemsConnectionsItemsWidth;
import graphic.GraphicRootClassesItemsConstraints;
import graphic.GraphicRootClassesItemsConstraintsCategoryBitMask;
import graphic.GraphicRootClassesItemsConstraintsCollisionBitMask;
import graphic.GraphicRootClassesItemsConstraintsContactTestBitMask;
import graphic.GraphicRootClassesItemsConstraintsIlumination;
import graphic.GraphicRootClassesItemsConstraintsOverlapping;
import graphic.GraphicRootClassesItemsConstraintsPlanes;
import graphic.GraphicRootClassesItemsConstraintsRotation;
import graphic.GraphicRootClassesItemsConstraintsSizeInit;
import graphic.GraphicRootClassesItemsConstraintsSizeMax;
import graphic.GraphicRootClassesItemsConstraintsSizeMin;
import graphic.GraphicRootClassesItemsConstraintsText;
import graphic.GraphicRootClassesItemsConstraintsTrim;
import graphic.GraphicRootClassesItemsConstraintsXToOriginPos;
import graphic.GraphicRootClassesItemsConstraintsYToOriginPos;
import graphic.GraphicRootClassesItemsConstraintsZToOriginPos;
import graphic.GraphicRootClassesItemsMaterialAttributes;
import graphic.GraphicRootClassesItemsMaterialAttributesItems;
import graphic.GraphicRootClassesItemsName;
import graphic.GraphicRootClassesItemsShowAttributes;
import graphic.GraphicRootClassesItemsShowAttributesItems;
import graphic.GraphicRootClassesItemsVersions;
import graphic.GraphicRootClassesItemsVersionsV1;
import graphic.GraphicRootClassesItemsVersionsV2;
import graphic.GraphicRootClassesItemsVersionsV3;
import graphic.GraphicRootClassesItemsVname;
import graphic.GraphicRootClassesItemsVnameV1;
import graphic.GraphicRootClassesItemsVnameV2;
import graphic.GraphicRootClassesItemsVnameV3;
import graphic.GraphicRootName;
import graphic.GraphicRootURI;
import graphic.graphic.services.GraphicGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GraphicSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphicGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GraphicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GraphicPackage.GRAPHIC_ROOT:
				sequence_GraphicRoot(context, (GraphicRoot) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES:
				sequence_GraphicRootClasses(context, (GraphicRootClasses) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS:
				sequence_GraphicRootClassesItems(context, (GraphicRootClassesItems) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS:
				sequence_GraphicRootClassesItemsConnections(context, (GraphicRootClassesItemsConnections) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS:
				sequence_GraphicRootClassesItemsConnectionsItems(context, (GraphicRootClassesItemsConnectionsItems) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_COLOR:
				sequence_GraphicRootClassesItemsConnectionsItemsColor(context, (GraphicRootClassesItemsConnectionsItemsColor) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR:
				sequence_GraphicRootClassesItemsConnectionsItemsDecorator(context, (GraphicRootClassesItemsConnectionsItemsDecorator) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_COLOR:
				sequence_GraphicRootClassesItemsConnectionsItemsDecoratorColor(context, (GraphicRootClassesItemsConnectionsItemsDecoratorColor) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_POS:
				sequence_GraphicRootClassesItemsConnectionsItemsDecoratorPos(context, (GraphicRootClassesItemsConnectionsItemsDecoratorPos) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_WIDTH:
				sequence_GraphicRootClassesItemsConnectionsItemsDecoratorWidth(context, (GraphicRootClassesItemsConnectionsItemsDecoratorWidth) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_NAME:
				sequence_GraphicRootClassesItemsConnectionsItemsName(context, (GraphicRootClassesItemsConnectionsItemsName) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_PATTERN:
				sequence_GraphicRootClassesItemsConnectionsItemsPattern(context, (GraphicRootClassesItemsConnectionsItemsPattern) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_POSITION:
				sequence_GraphicRootClassesItemsConnectionsItemsPosition(context, (GraphicRootClassesItemsConnectionsItemsPosition) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TARGET:
				sequence_GraphicRootClassesItemsConnectionsItemsTarget(context, (GraphicRootClassesItemsConnectionsItemsTarget) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TEXT_COLOR:
				sequence_GraphicRootClassesItemsConnectionsItemsTextColor(context, (GraphicRootClassesItemsConnectionsItemsTextColor) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TYPE:
				sequence_GraphicRootClassesItemsConnectionsItemsType(context, (GraphicRootClassesItemsConnectionsItemsType) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_WIDTH:
				sequence_GraphicRootClassesItemsConnectionsItemsWidth(context, (GraphicRootClassesItemsConnectionsItemsWidth) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS:
				sequence_GraphicRootClassesItemsConstraints(context, (GraphicRootClassesItemsConstraints) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CATEGORY_BIT_MASK:
				sequence_GraphicRootClassesItemsConstraintsCategoryBitMask(context, (GraphicRootClassesItemsConstraintsCategoryBitMask) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_COLLISION_BIT_MASK:
				sequence_GraphicRootClassesItemsConstraintsCollisionBitMask(context, (GraphicRootClassesItemsConstraintsCollisionBitMask) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CONTACT_TEST_BIT_MASK:
				sequence_GraphicRootClassesItemsConstraintsContactTestBitMask(context, (GraphicRootClassesItemsConstraintsContactTestBitMask) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ILUMINATION:
				sequence_GraphicRootClassesItemsConstraintsIlumination(context, (GraphicRootClassesItemsConstraintsIlumination) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_OVERLAPPING:
				sequence_GraphicRootClassesItemsConstraintsOverlapping(context, (GraphicRootClassesItemsConstraintsOverlapping) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_PLANES:
				sequence_GraphicRootClassesItemsConstraintsPlanes(context, (GraphicRootClassesItemsConstraintsPlanes) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ROTATION:
				sequence_GraphicRootClassesItemsConstraintsRotation(context, (GraphicRootClassesItemsConstraintsRotation) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_INIT:
				sequence_GraphicRootClassesItemsConstraintsSizeInit(context, (GraphicRootClassesItemsConstraintsSizeInit) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MAX:
				sequence_GraphicRootClassesItemsConstraintsSizeMax(context, (GraphicRootClassesItemsConstraintsSizeMax) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MIN:
				sequence_GraphicRootClassesItemsConstraintsSizeMin(context, (GraphicRootClassesItemsConstraintsSizeMin) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TEXT:
				sequence_GraphicRootClassesItemsConstraintsText(context, (GraphicRootClassesItemsConstraintsText) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TRIM:
				sequence_GraphicRootClassesItemsConstraintsTrim(context, (GraphicRootClassesItemsConstraintsTrim) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_XTO_ORIGIN_POS:
				sequence_GraphicRootClassesItemsConstraintsXToOriginPos(context, (GraphicRootClassesItemsConstraintsXToOriginPos) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_YTO_ORIGIN_POS:
				sequence_GraphicRootClassesItemsConstraintsYToOriginPos(context, (GraphicRootClassesItemsConstraintsYToOriginPos) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ZTO_ORIGIN_POS:
				sequence_GraphicRootClassesItemsConstraintsZToOriginPos(context, (GraphicRootClassesItemsConstraintsZToOriginPos) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_MATERIAL_ATTRIBUTES:
				sequence_GraphicRootClassesItemsMaterialAttributes(context, (GraphicRootClassesItemsMaterialAttributes) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_MATERIAL_ATTRIBUTES_ITEMS:
				sequence_GraphicRootClassesItemsMaterialAttributesItems(context, (GraphicRootClassesItemsMaterialAttributesItems) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_NAME:
				sequence_GraphicRootClassesItemsName(context, (GraphicRootClassesItemsName) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_SHOW_ATTRIBUTES:
				sequence_GraphicRootClassesItemsShowAttributes(context, (GraphicRootClassesItemsShowAttributes) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_SHOW_ATTRIBUTES_ITEMS:
				sequence_GraphicRootClassesItemsShowAttributesItems(context, (GraphicRootClassesItemsShowAttributesItems) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS:
				sequence_GraphicRootClassesItemsVersions(context, (GraphicRootClassesItemsVersions) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V1:
				sequence_GraphicRootClassesItemsVersionsV1(context, (GraphicRootClassesItemsVersionsV1) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V2:
				sequence_GraphicRootClassesItemsVersionsV2(context, (GraphicRootClassesItemsVersionsV2) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V3:
				sequence_GraphicRootClassesItemsVersionsV3(context, (GraphicRootClassesItemsVersionsV3) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME:
				sequence_GraphicRootClassesItemsVname(context, (GraphicRootClassesItemsVname) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V1:
				sequence_GraphicRootClassesItemsVnameV1(context, (GraphicRootClassesItemsVnameV1) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V2:
				sequence_GraphicRootClassesItemsVnameV2(context, (GraphicRootClassesItemsVnameV2) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V3:
				sequence_GraphicRootClassesItemsVnameV3(context, (GraphicRootClassesItemsVnameV3) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_NAME:
				sequence_GraphicRootName(context, (GraphicRootName) semanticObject); 
				return; 
			case GraphicPackage.GRAPHIC_ROOT_URI:
				sequence_GraphicRootURI(context, (GraphicRootURI) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsColor
	 *     GraphicRootClassesItemsConnectionsItemsColor returns GraphicRootClassesItemsConnectionsItemsColor
	 *
	 * Constraint:
	 *     color=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsColor(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsColor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_COLOR__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_COLOR__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsColorAccess().getColorEStringParserRuleCall_2_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsDecoratorColor
	 *     GraphicRootClassesItemsConnectionsItemsDecoratorColor returns GraphicRootClassesItemsConnectionsItemsDecoratorColor
	 *
	 * Constraint:
	 *     decoratorColor=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsDecoratorColor(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsDecoratorColor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_COLOR__DECORATOR_COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_COLOR__DECORATOR_COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsDecoratorColorAccess().getDecoratorColorEStringParserRuleCall_2_0(), semanticObject.getDecoratorColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsDecoratorPos
	 *     GraphicRootClassesItemsConnectionsItemsDecoratorPos returns GraphicRootClassesItemsConnectionsItemsDecoratorPos
	 *
	 * Constraint:
	 *     decoratorPos=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsDecoratorPos(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsDecoratorPos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_POS__DECORATOR_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_POS__DECORATOR_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsDecoratorPosAccess().getDecoratorPosEStringParserRuleCall_2_0(), semanticObject.getDecoratorPos());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsDecoratorWidth
	 *     GraphicRootClassesItemsConnectionsItemsDecoratorWidth returns GraphicRootClassesItemsConnectionsItemsDecoratorWidth
	 *
	 * Constraint:
	 *     decoratorWidth=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsDecoratorWidth(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsDecoratorWidth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_WIDTH__DECORATOR_WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR_WIDTH__DECORATOR_WIDTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsDecoratorWidthAccess().getDecoratorWidthEStringParserRuleCall_2_0(), semanticObject.getDecoratorWidth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsDecorator
	 *     GraphicRootClassesItemsConnectionsItemsDecorator returns GraphicRootClassesItemsConnectionsItemsDecorator
	 *
	 * Constraint:
	 *     decorator=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsDecorator(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsDecorator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR__DECORATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_DECORATOR__DECORATOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsDecoratorAccess().getDecoratorEStringParserRuleCall_2_0(), semanticObject.getDecorator());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsName
	 *     GraphicRootClassesItemsConnectionsItemsName returns GraphicRootClassesItemsConnectionsItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsName(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsPattern
	 *     GraphicRootClassesItemsConnectionsItemsPattern returns GraphicRootClassesItemsConnectionsItemsPattern
	 *
	 * Constraint:
	 *     pattern=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsPattern(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsPattern semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_PATTERN__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_PATTERN__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsPatternAccess().getPatternEStringParserRuleCall_2_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsPosition
	 *     GraphicRootClassesItemsConnectionsItemsPosition returns GraphicRootClassesItemsConnectionsItemsPosition
	 *
	 * Constraint:
	 *     position=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsPosition(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsPosition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_POSITION__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_POSITION__POSITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsPositionAccess().getPositionEStringParserRuleCall_2_0(), semanticObject.getPosition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsTarget
	 *     GraphicRootClassesItemsConnectionsItemsTarget returns GraphicRootClassesItemsConnectionsItemsTarget
	 *
	 * Constraint:
	 *     target=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsTarget(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsTarget semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TARGET__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TARGET__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsTargetAccess().getTargetEStringParserRuleCall_2_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsTextColor
	 *     GraphicRootClassesItemsConnectionsItemsTextColor returns GraphicRootClassesItemsConnectionsItemsTextColor
	 *
	 * Constraint:
	 *     textColor=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsTextColor(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsTextColor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TEXT_COLOR__TEXT_COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TEXT_COLOR__TEXT_COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsTextColorAccess().getTextColorEStringParserRuleCall_2_0(), semanticObject.getTextColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsType
	 *     GraphicRootClassesItemsConnectionsItemsType returns GraphicRootClassesItemsConnectionsItemsType
	 *
	 * Constraint:
	 *     type=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsType(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsTypeAccess().getTypeEStringParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItemsPropertiesAbstract returns GraphicRootClassesItemsConnectionsItemsWidth
	 *     GraphicRootClassesItemsConnectionsItemsWidth returns GraphicRootClassesItemsConnectionsItemsWidth
	 *
	 * Constraint:
	 *     width=EString
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItemsWidth(ISerializationContext context, GraphicRootClassesItemsConnectionsItemsWidth semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_WIDTH__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONNECTIONS_ITEMS_WIDTH__WIDTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConnectionsItemsWidthAccess().getWidthEStringParserRuleCall_2_0(), semanticObject.getWidth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConnectionsItems returns GraphicRootClassesItemsConnectionsItems
	 *
	 * Constraint:
	 *     (items+=GraphicRootClassesItemsConnectionsItemsPropertiesAbstract items+=GraphicRootClassesItemsConnectionsItemsPropertiesAbstract*)?
	 */
	protected void sequence_GraphicRootClassesItemsConnectionsItems(ISerializationContext context, GraphicRootClassesItemsConnectionsItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsConnections
	 *     GraphicRootClassesItemsConnections returns GraphicRootClassesItemsConnections
	 *
	 * Constraint:
	 *     (connections+=GraphicRootClassesItemsConnectionsItems connections+=GraphicRootClassesItemsConnectionsItems*)?
	 */
	protected void sequence_GraphicRootClassesItemsConnections(ISerializationContext context, GraphicRootClassesItemsConnections semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsCategoryBitMask
	 *     GraphicRootClassesItemsConstraintsCategoryBitMask returns GraphicRootClassesItemsConstraintsCategoryBitMask
	 *
	 * Constraint:
	 *     categoryBitMask=EDoubleObject
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsCategoryBitMask(ISerializationContext context, GraphicRootClassesItemsConstraintsCategoryBitMask semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CATEGORY_BIT_MASK__CATEGORY_BIT_MASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CATEGORY_BIT_MASK__CATEGORY_BIT_MASK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsCategoryBitMaskAccess().getCategoryBitMaskEDoubleObjectParserRuleCall_2_0(), semanticObject.getCategoryBitMask());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsCollisionBitMask
	 *     GraphicRootClassesItemsConstraintsCollisionBitMask returns GraphicRootClassesItemsConstraintsCollisionBitMask
	 *
	 * Constraint:
	 *     collisionBitMask=EDoubleObject
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsCollisionBitMask(ISerializationContext context, GraphicRootClassesItemsConstraintsCollisionBitMask semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_COLLISION_BIT_MASK__COLLISION_BIT_MASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_COLLISION_BIT_MASK__COLLISION_BIT_MASK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsCollisionBitMaskAccess().getCollisionBitMaskEDoubleObjectParserRuleCall_2_0(), semanticObject.getCollisionBitMask());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsContactTestBitMask
	 *     GraphicRootClassesItemsConstraintsContactTestBitMask returns GraphicRootClassesItemsConstraintsContactTestBitMask
	 *
	 * Constraint:
	 *     contactTestBitMask=EDoubleObject
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsContactTestBitMask(ISerializationContext context, GraphicRootClassesItemsConstraintsContactTestBitMask semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CONTACT_TEST_BIT_MASK__CONTACT_TEST_BIT_MASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_CONTACT_TEST_BIT_MASK__CONTACT_TEST_BIT_MASK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsContactTestBitMaskAccess().getContactTestBitMaskEDoubleObjectParserRuleCall_2_0(), semanticObject.getContactTestBitMask());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsIlumination
	 *     GraphicRootClassesItemsConstraintsIlumination returns GraphicRootClassesItemsConstraintsIlumination
	 *
	 * Constraint:
	 *     ilumination=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsIlumination(ISerializationContext context, GraphicRootClassesItemsConstraintsIlumination semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ILUMINATION__ILUMINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ILUMINATION__ILUMINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsIluminationAccess().getIluminationEStringParserRuleCall_2_0(), semanticObject.getIlumination());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsOverlapping
	 *     GraphicRootClassesItemsConstraintsOverlapping returns GraphicRootClassesItemsConstraintsOverlapping
	 *
	 * Constraint:
	 *     overlapping=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsOverlapping(ISerializationContext context, GraphicRootClassesItemsConstraintsOverlapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_OVERLAPPING__OVERLAPPING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_OVERLAPPING__OVERLAPPING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsOverlappingAccess().getOverlappingEStringParserRuleCall_2_0(), semanticObject.getOverlapping());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsPlanes
	 *     GraphicRootClassesItemsConstraintsPlanes returns GraphicRootClassesItemsConstraintsPlanes
	 *
	 * Constraint:
	 *     planes=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsPlanes(ISerializationContext context, GraphicRootClassesItemsConstraintsPlanes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_PLANES__PLANES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_PLANES__PLANES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsPlanesAccess().getPlanesEStringParserRuleCall_2_0(), semanticObject.getPlanes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsRotation
	 *     GraphicRootClassesItemsConstraintsRotation returns GraphicRootClassesItemsConstraintsRotation
	 *
	 * Constraint:
	 *     rotation=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsRotation(ISerializationContext context, GraphicRootClassesItemsConstraintsRotation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ROTATION__ROTATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ROTATION__ROTATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsRotationAccess().getRotationEStringParserRuleCall_2_0(), semanticObject.getRotation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsSizeInit
	 *     GraphicRootClassesItemsConstraintsSizeInit returns GraphicRootClassesItemsConstraintsSizeInit
	 *
	 * Constraint:
	 *     sizeInit=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsSizeInit(ISerializationContext context, GraphicRootClassesItemsConstraintsSizeInit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_INIT__SIZE_INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_INIT__SIZE_INIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsSizeInitAccess().getSizeInitEStringParserRuleCall_2_0(), semanticObject.getSizeInit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsSizeMax
	 *     GraphicRootClassesItemsConstraintsSizeMax returns GraphicRootClassesItemsConstraintsSizeMax
	 *
	 * Constraint:
	 *     sizeMax=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsSizeMax(ISerializationContext context, GraphicRootClassesItemsConstraintsSizeMax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MAX__SIZE_MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MAX__SIZE_MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsSizeMaxAccess().getSizeMaxEStringParserRuleCall_2_0(), semanticObject.getSizeMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsSizeMin
	 *     GraphicRootClassesItemsConstraintsSizeMin returns GraphicRootClassesItemsConstraintsSizeMin
	 *
	 * Constraint:
	 *     sizeMin=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsSizeMin(ISerializationContext context, GraphicRootClassesItemsConstraintsSizeMin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MIN__SIZE_MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_SIZE_MIN__SIZE_MIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsSizeMinAccess().getSizeMinEStringParserRuleCall_2_0(), semanticObject.getSizeMin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsText
	 *     GraphicRootClassesItemsConstraintsText returns GraphicRootClassesItemsConstraintsText
	 *
	 * Constraint:
	 *     text=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsText(ISerializationContext context, GraphicRootClassesItemsConstraintsText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TEXT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsTextAccess().getTextEStringParserRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsTrim
	 *     GraphicRootClassesItemsConstraintsTrim returns GraphicRootClassesItemsConstraintsTrim
	 *
	 * Constraint:
	 *     trim=EBooleanObject
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsTrim(ISerializationContext context, GraphicRootClassesItemsConstraintsTrim semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TRIM__TRIM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_TRIM__TRIM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsTrimAccess().getTrimEBooleanObjectParserRuleCall_2_0(), semanticObject.getTrim());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsXToOriginPos
	 *     GraphicRootClassesItemsConstraintsXToOriginPos returns GraphicRootClassesItemsConstraintsXToOriginPos
	 *
	 * Constraint:
	 *     xToOriginPos=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsXToOriginPos(ISerializationContext context, GraphicRootClassesItemsConstraintsXToOriginPos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_XTO_ORIGIN_POS__XTO_ORIGIN_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_XTO_ORIGIN_POS__XTO_ORIGIN_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsXToOriginPosAccess().getXToOriginPosEStringParserRuleCall_2_0(), semanticObject.getXToOriginPos());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsYToOriginPos
	 *     GraphicRootClassesItemsConstraintsYToOriginPos returns GraphicRootClassesItemsConstraintsYToOriginPos
	 *
	 * Constraint:
	 *     yToOriginPos=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsYToOriginPos(ISerializationContext context, GraphicRootClassesItemsConstraintsYToOriginPos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_YTO_ORIGIN_POS__YTO_ORIGIN_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_YTO_ORIGIN_POS__YTO_ORIGIN_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsYToOriginPosAccess().getYToOriginPosEStringParserRuleCall_2_0(), semanticObject.getYToOriginPos());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsConstraintsPropertiesAbstract returns GraphicRootClassesItemsConstraintsZToOriginPos
	 *     GraphicRootClassesItemsConstraintsZToOriginPos returns GraphicRootClassesItemsConstraintsZToOriginPos
	 *
	 * Constraint:
	 *     zToOriginPos=EString
	 */
	protected void sequence_GraphicRootClassesItemsConstraintsZToOriginPos(ISerializationContext context, GraphicRootClassesItemsConstraintsZToOriginPos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ZTO_ORIGIN_POS__ZTO_ORIGIN_POS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_CONSTRAINTS_ZTO_ORIGIN_POS__ZTO_ORIGIN_POS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsConstraintsZToOriginPosAccess().getZToOriginPosEStringParserRuleCall_2_0(), semanticObject.getZToOriginPos());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsConstraints
	 *     GraphicRootClassesItemsConstraints returns GraphicRootClassesItemsConstraints
	 *
	 * Constraint:
	 *     (constraints+=GraphicRootClassesItemsConstraintsPropertiesAbstract constraints+=GraphicRootClassesItemsConstraintsPropertiesAbstract*)?
	 */
	protected void sequence_GraphicRootClassesItemsConstraints(ISerializationContext context, GraphicRootClassesItemsConstraints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsMaterialAttributesItems returns GraphicRootClassesItemsMaterialAttributesItems
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_GraphicRootClassesItemsMaterialAttributesItems(ISerializationContext context, GraphicRootClassesItemsMaterialAttributesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_MATERIAL_ATTRIBUTES_ITEMS__ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_MATERIAL_ATTRIBUTES_ITEMS__ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsMaterialAttributesItemsAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsMaterialAttributes
	 *     GraphicRootClassesItemsMaterialAttributes returns GraphicRootClassesItemsMaterialAttributes
	 *
	 * Constraint:
	 *     (materialAttributes+=GraphicRootClassesItemsMaterialAttributesItems materialAttributes+=GraphicRootClassesItemsMaterialAttributesItems*)?
	 */
	protected void sequence_GraphicRootClassesItemsMaterialAttributes(ISerializationContext context, GraphicRootClassesItemsMaterialAttributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsName
	 *     GraphicRootClassesItemsName returns GraphicRootClassesItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_GraphicRootClassesItemsName(ISerializationContext context, GraphicRootClassesItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsShowAttributesItems returns GraphicRootClassesItemsShowAttributesItems
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_GraphicRootClassesItemsShowAttributesItems(ISerializationContext context, GraphicRootClassesItemsShowAttributesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_SHOW_ATTRIBUTES_ITEMS__ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_SHOW_ATTRIBUTES_ITEMS__ITEMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsShowAttributesItemsAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsShowAttributes
	 *     GraphicRootClassesItemsShowAttributes returns GraphicRootClassesItemsShowAttributes
	 *
	 * Constraint:
	 *     (showAttributes+=GraphicRootClassesItemsShowAttributesItems showAttributes+=GraphicRootClassesItemsShowAttributesItems*)?
	 */
	protected void sequence_GraphicRootClassesItemsShowAttributes(ISerializationContext context, GraphicRootClassesItemsShowAttributes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVersionsPropertiesAbstract returns GraphicRootClassesItemsVersionsV1
	 *     GraphicRootClassesItemsVersionsV1 returns GraphicRootClassesItemsVersionsV1
	 *
	 * Constraint:
	 *     v1=EString
	 */
	protected void sequence_GraphicRootClassesItemsVersionsV1(ISerializationContext context, GraphicRootClassesItemsVersionsV1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V1__V1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V1__V1));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVersionsV1Access().getV1EStringParserRuleCall_2_0(), semanticObject.getV1());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVersionsPropertiesAbstract returns GraphicRootClassesItemsVersionsV2
	 *     GraphicRootClassesItemsVersionsV2 returns GraphicRootClassesItemsVersionsV2
	 *
	 * Constraint:
	 *     v2=EString
	 */
	protected void sequence_GraphicRootClassesItemsVersionsV2(ISerializationContext context, GraphicRootClassesItemsVersionsV2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V2__V2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V2__V2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVersionsV2Access().getV2EStringParserRuleCall_2_0(), semanticObject.getV2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVersionsPropertiesAbstract returns GraphicRootClassesItemsVersionsV3
	 *     GraphicRootClassesItemsVersionsV3 returns GraphicRootClassesItemsVersionsV3
	 *
	 * Constraint:
	 *     v3=EString
	 */
	protected void sequence_GraphicRootClassesItemsVersionsV3(ISerializationContext context, GraphicRootClassesItemsVersionsV3 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V3__V3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VERSIONS_V3__V3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVersionsV3Access().getV3EStringParserRuleCall_2_0(), semanticObject.getV3());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsVersions
	 *     GraphicRootClassesItemsVersions returns GraphicRootClassesItemsVersions
	 *
	 * Constraint:
	 *     (versions+=GraphicRootClassesItemsVersionsPropertiesAbstract versions+=GraphicRootClassesItemsVersionsPropertiesAbstract*)?
	 */
	protected void sequence_GraphicRootClassesItemsVersions(ISerializationContext context, GraphicRootClassesItemsVersions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVnamePropertiesAbstract returns GraphicRootClassesItemsVnameV1
	 *     GraphicRootClassesItemsVnameV1 returns GraphicRootClassesItemsVnameV1
	 *
	 * Constraint:
	 *     v1=EString
	 */
	protected void sequence_GraphicRootClassesItemsVnameV1(ISerializationContext context, GraphicRootClassesItemsVnameV1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V1__V1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V1__V1));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVnameV1Access().getV1EStringParserRuleCall_2_0(), semanticObject.getV1());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVnamePropertiesAbstract returns GraphicRootClassesItemsVnameV2
	 *     GraphicRootClassesItemsVnameV2 returns GraphicRootClassesItemsVnameV2
	 *
	 * Constraint:
	 *     v2=EString
	 */
	protected void sequence_GraphicRootClassesItemsVnameV2(ISerializationContext context, GraphicRootClassesItemsVnameV2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V2__V2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V2__V2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVnameV2Access().getV2EStringParserRuleCall_2_0(), semanticObject.getV2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsVnamePropertiesAbstract returns GraphicRootClassesItemsVnameV3
	 *     GraphicRootClassesItemsVnameV3 returns GraphicRootClassesItemsVnameV3
	 *
	 * Constraint:
	 *     v3=EString
	 */
	protected void sequence_GraphicRootClassesItemsVnameV3(ISerializationContext context, GraphicRootClassesItemsVnameV3 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V3__V3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_CLASSES_ITEMS_VNAME_V3__V3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootClassesItemsVnameV3Access().getV3EStringParserRuleCall_2_0(), semanticObject.getV3());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItemsPropertiesAbstract returns GraphicRootClassesItemsVname
	 *     GraphicRootClassesItemsVname returns GraphicRootClassesItemsVname
	 *
	 * Constraint:
	 *     (vname+=GraphicRootClassesItemsVnamePropertiesAbstract vname+=GraphicRootClassesItemsVnamePropertiesAbstract*)?
	 */
	protected void sequence_GraphicRootClassesItemsVname(ISerializationContext context, GraphicRootClassesItemsVname semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootClassesItems returns GraphicRootClassesItems
	 *
	 * Constraint:
	 *     (items+=GraphicRootClassesItemsPropertiesAbstract items+=GraphicRootClassesItemsPropertiesAbstract*)?
	 */
	protected void sequence_GraphicRootClassesItems(ISerializationContext context, GraphicRootClassesItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootPropertiesAbstract returns GraphicRootClasses
	 *     GraphicRootClasses returns GraphicRootClasses
	 *
	 * Constraint:
	 *     (classes+=GraphicRootClassesItems classes+=GraphicRootClassesItems*)?
	 */
	protected void sequence_GraphicRootClasses(ISerializationContext context, GraphicRootClasses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootPropertiesAbstract returns GraphicRootName
	 *     GraphicRootName returns GraphicRootName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_GraphicRootName(ISerializationContext context, GraphicRootName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRootPropertiesAbstract returns GraphicRootURI
	 *     GraphicRootURI returns GraphicRootURI
	 *
	 * Constraint:
	 *     URI=EString
	 */
	protected void sequence_GraphicRootURI(ISerializationContext context, GraphicRootURI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_URI__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphicPackage.Literals.GRAPHIC_ROOT_URI__URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphicRootURIAccess().getURIEStringParserRuleCall_2_0(), semanticObject.getURI());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GraphicRoot returns GraphicRoot
	 *
	 * Constraint:
	 *     (graphicRoot+=GraphicRootPropertiesAbstract graphicRoot+=GraphicRootPropertiesAbstract*)?
	 */
	protected void sequence_GraphicRoot(ISerializationContext context, GraphicRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

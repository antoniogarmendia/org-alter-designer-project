/*
 * generated by Xtext 2.23.0
 */
package codesinfos.codesinfos.serializer;

import codesinfos.CodesinfosPackage;
import codesinfos.CodesinfosRoot;
import codesinfos.CodesinfosRootCodes;
import codesinfos.CodesinfosRootCodesItems;
import codesinfos.CodesinfosRootCodesItemsClassname;
import codesinfos.CodesinfosRootCodesItemsName;
import codesinfos.CodesinfosRootCodesItemsNodename;
import codesinfos.CodesinfosRootName;
import codesinfos.codesinfos.services.CodesinfosGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CodesinfosSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CodesinfosGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CodesinfosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CodesinfosPackage.CODESINFOS_ROOT:
				sequence_CodesinfosRoot(context, (CodesinfosRoot) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_CODES:
				sequence_CodesinfosRootCodes(context, (CodesinfosRootCodes) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_CODES_ITEMS:
				sequence_CodesinfosRootCodesItems(context, (CodesinfosRootCodesItems) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_CODES_ITEMS_CLASSNAME:
				sequence_CodesinfosRootCodesItemsClassname(context, (CodesinfosRootCodesItemsClassname) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_CODES_ITEMS_NAME:
				sequence_CodesinfosRootCodesItemsName(context, (CodesinfosRootCodesItemsName) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_CODES_ITEMS_NODENAME:
				sequence_CodesinfosRootCodesItemsNodename(context, (CodesinfosRootCodesItemsNodename) semanticObject); 
				return; 
			case CodesinfosPackage.CODESINFOS_ROOT_NAME:
				sequence_CodesinfosRootName(context, (CodesinfosRootName) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CodesinfosRootCodesItemsPropertiesAbstract returns CodesinfosRootCodesItemsClassname
	 *     CodesinfosRootCodesItemsClassname returns CodesinfosRootCodesItemsClassname
	 *
	 * Constraint:
	 *     classname=EString
	 */
	protected void sequence_CodesinfosRootCodesItemsClassname(ISerializationContext context, CodesinfosRootCodesItemsClassname semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_CLASSNAME__CLASSNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_CLASSNAME__CLASSNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodesinfosRootCodesItemsClassnameAccess().getClassnameEStringParserRuleCall_2_0(), semanticObject.getClassname());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRootCodesItemsPropertiesAbstract returns CodesinfosRootCodesItemsName
	 *     CodesinfosRootCodesItemsName returns CodesinfosRootCodesItemsName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_CodesinfosRootCodesItemsName(ISerializationContext context, CodesinfosRootCodesItemsName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodesinfosRootCodesItemsNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRootCodesItemsPropertiesAbstract returns CodesinfosRootCodesItemsNodename
	 *     CodesinfosRootCodesItemsNodename returns CodesinfosRootCodesItemsNodename
	 *
	 * Constraint:
	 *     nodename=EString
	 */
	protected void sequence_CodesinfosRootCodesItemsNodename(ISerializationContext context, CodesinfosRootCodesItemsNodename semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_NODENAME__NODENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_CODES_ITEMS_NODENAME__NODENAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodesinfosRootCodesItemsNodenameAccess().getNodenameEStringParserRuleCall_2_0(), semanticObject.getNodename());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRootCodesItems returns CodesinfosRootCodesItems
	 *
	 * Constraint:
	 *     (items+=CodesinfosRootCodesItemsPropertiesAbstract items+=CodesinfosRootCodesItemsPropertiesAbstract*)?
	 */
	protected void sequence_CodesinfosRootCodesItems(ISerializationContext context, CodesinfosRootCodesItems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRootPropertiesAbstract returns CodesinfosRootCodes
	 *     CodesinfosRootCodes returns CodesinfosRootCodes
	 *
	 * Constraint:
	 *     (codes+=CodesinfosRootCodesItems codes+=CodesinfosRootCodesItems*)?
	 */
	protected void sequence_CodesinfosRootCodes(ISerializationContext context, CodesinfosRootCodes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRootPropertiesAbstract returns CodesinfosRootName
	 *     CodesinfosRootName returns CodesinfosRootName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_CodesinfosRootName(ISerializationContext context, CodesinfosRootName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CodesinfosPackage.Literals.CODESINFOS_ROOT_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodesinfosRootNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CodesinfosRoot returns CodesinfosRoot
	 *
	 * Constraint:
	 *     (codesinfosRoot+=CodesinfosRootPropertiesAbstract codesinfosRoot+=CodesinfosRootPropertiesAbstract*)?
	 */
	protected void sequence_CodesinfosRoot(ISerializationContext context, CodesinfosRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

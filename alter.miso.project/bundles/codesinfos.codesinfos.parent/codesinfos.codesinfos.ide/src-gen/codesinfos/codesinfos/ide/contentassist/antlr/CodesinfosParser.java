/*
 * generated by Xtext 2.23.0
 */
package codesinfos.codesinfos.ide.contentassist.antlr;

import codesinfos.codesinfos.ide.contentassist.antlr.internal.InternalCodesinfosParser;
import codesinfos.codesinfos.services.CodesinfosGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CodesinfosParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CodesinfosGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CodesinfosGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCodesinfosRootPropertiesAbstractAccess().getAlternatives(), "rule__CodesinfosRootPropertiesAbstract__Alternatives");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsPropertiesAbstractAccess().getAlternatives(), "rule__CodesinfosRootCodesItemsPropertiesAbstract__Alternatives");
			builder.put(grammarAccess.getVALID_STRINGAccess().getAlternatives(), "rule__VALID_STRING__Alternatives");
			builder.put(grammarAccess.getKEYWORDAccess().getAlternatives(), "rule__KEYWORD__Alternatives");
			builder.put(grammarAccess.getCodesinfosRootAccess().getGroup(), "rule__CodesinfosRoot__Group__0");
			builder.put(grammarAccess.getCodesinfosRootAccess().getGroup_2(), "rule__CodesinfosRoot__Group_2__0");
			builder.put(grammarAccess.getCodesinfosRootAccess().getGroup_2_1(), "rule__CodesinfosRoot__Group_2_1__0");
			builder.put(grammarAccess.getCodesinfosRootNameAccess().getGroup(), "rule__CodesinfosRootName__Group__0");
			builder.put(grammarAccess.getCodesinfosRootCodesAccess().getGroup(), "rule__CodesinfosRootCodes__Group__0");
			builder.put(grammarAccess.getCodesinfosRootCodesAccess().getGroup_4(), "rule__CodesinfosRootCodes__Group_4__0");
			builder.put(grammarAccess.getCodesinfosRootCodesAccess().getGroup_4_1(), "rule__CodesinfosRootCodes__Group_4_1__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsAccess().getGroup(), "rule__CodesinfosRootCodesItems__Group__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsAccess().getGroup_2(), "rule__CodesinfosRootCodesItems__Group_2__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsAccess().getGroup_2_1(), "rule__CodesinfosRootCodesItems__Group_2_1__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsNameAccess().getGroup(), "rule__CodesinfosRootCodesItemsName__Group__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsClassnameAccess().getGroup(), "rule__CodesinfosRootCodesItemsClassname__Group__0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsNodenameAccess().getGroup(), "rule__CodesinfosRootCodesItemsNodename__Group__0");
			builder.put(grammarAccess.getCodesinfosRootAccess().getCodesinfosRootAssignment_2_0(), "rule__CodesinfosRoot__CodesinfosRootAssignment_2_0");
			builder.put(grammarAccess.getCodesinfosRootAccess().getCodesinfosRootAssignment_2_1_1(), "rule__CodesinfosRoot__CodesinfosRootAssignment_2_1_1");
			builder.put(grammarAccess.getCodesinfosRootNameAccess().getNameAssignment_3(), "rule__CodesinfosRootName__NameAssignment_3");
			builder.put(grammarAccess.getCodesinfosRootCodesAccess().getCodesAssignment_4_0(), "rule__CodesinfosRootCodes__CodesAssignment_4_0");
			builder.put(grammarAccess.getCodesinfosRootCodesAccess().getCodesAssignment_4_1_1(), "rule__CodesinfosRootCodes__CodesAssignment_4_1_1");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsAccess().getItemsAssignment_2_0(), "rule__CodesinfosRootCodesItems__ItemsAssignment_2_0");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsAccess().getItemsAssignment_2_1_1(), "rule__CodesinfosRootCodesItems__ItemsAssignment_2_1_1");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsNameAccess().getNameAssignment_3(), "rule__CodesinfosRootCodesItemsName__NameAssignment_3");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsClassnameAccess().getClassnameAssignment_2(), "rule__CodesinfosRootCodesItemsClassname__ClassnameAssignment_2");
			builder.put(grammarAccess.getCodesinfosRootCodesItemsNodenameAccess().getNodenameAssignment_2(), "rule__CodesinfosRootCodesItemsNodename__NodenameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CodesinfosGrammarAccess grammarAccess;

	@Override
	protected InternalCodesinfosParser createParser() {
		InternalCodesinfosParser result = new InternalCodesinfosParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CodesinfosGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CodesinfosGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
